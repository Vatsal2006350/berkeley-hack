export interface Note {
  id: string
  caseId: string
  content: string
  type: 'draft' | 'finalized'
  timestamp: Date
  author: string
}

export const notes = {
  async store(note: Omit<Note, 'id' | 'timestamp'>): Promise<Note> {
    // Mock implementation - in real app would call API endpoint
    const newNote: Note = {
      ...note,
      id: Math.random().toString(36).substr(2, 9),
      timestamp: new Date(),
    }
    
    // Store in localStorage for demo
    const existingNotes = JSON.parse(localStorage.getItem('notes') || '[]')
    existingNotes.push(newNote)
    localStorage.setItem('notes', JSON.stringify(existingNotes))
    
    return newNote
  },

  async finalize(caseId: string, content: string, author: string): Promise<{ url: string, content: string }> {
    const finalizedNote = await this.store({
      caseId,
      content,
      type: 'finalized',
      author
    })

    // Generate markdown content
    const markdownContent = `# Tumor Board Minutes
    
**Case ID:** ${caseId}
**Date:** ${new Date().toLocaleDateString()}
**Attendees:** ${author}

## Clinical Summary
${content}

## Recommendations
[To be filled by attendees]

## Next Steps
[To be filled by attendees]

---
*Generated by Nila Genomics v0.8.0*`

    // Create downloadable blob URL
    const blob = new Blob([markdownContent], { type: 'text/markdown' })
    const url = URL.createObjectURL(blob)

    return { url, content: markdownContent }
  },

  async getDrafts(caseId: string): Promise<Note[]> {
    const allNotes = JSON.parse(localStorage.getItem('notes') || '[]')
    return allNotes.filter((note: Note) => note.caseId === caseId && note.type === 'draft')
  }
} 